import { useState, useEffect, useMemo } from 'react'
import Card, { CardContent, CardDescription, CardHeader, CardTitle } from '../components/UI/Card'
import Button from '../components/UI/Button'
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from 'recharts'
import { 
  Search, 
  FileText, 
  TrendingUp, 
  Calendar,
  ExternalLink,
  Activity,
  BarChart3,
  PieChart as PieChartIcon,
  Users,
  Clock,
  AlertCircle,
  Target,
  Zap,
  History,
  Download
} from 'lucide-react'
import { Link } from 'react-router-dom'
import { useAuthStore } from '../store/authStore'
import { useSearchStore } from '../store/searchStore'
import { cn } from '../lib/utils'
import SearchTrendChart from '../components/Charts/SearchTrendChart'
import FieldDistributionChart from '../components/Charts/FieldDistributionChart'
import HourlyActivityChart from '../components/Charts/HourlyActivityChart'
import WeeklyActivityChart from '../components/Charts/WeeklyActivityChart'

interface WeeklyActivityData {
  day: string;
  dayIndex: number;
  count: number;
  searchCount: number;
  aiAnalysisCount: number;
}

export default function Dashboard() {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [userStats, setUserStats] = useState({
    totalSearches: 0,
    reportsGenerated: 0,
    monthlyActivity: 0,
    savedPatents: 0,
    totalLogins: 0,
    engagementScore: 0,
    averageSearchResults: 0,
    aiAnalysisCount: 0,
    documentDownloadCount: 0,
    searchHistory: [] as Array<{
      date: string
      count: number
    }>,
    searchKeywords: [] as Array<{
      keyword: string
      count: number
      field: string
    }>,
    recentSearches: [] as Array<{
      keyword: string
      searchDate: string
      resultsCount: number
      field: string
    }>,
    recentReports: [] as Array<{
      id: string
      title: string
      createdAt: string
      applicationNumber: string
      downloadUrl: string
    }>,
    fieldDistribution: [] as Array<{
      field: string
      count: number
    }>
  })
  const [chartData, setChartData] = useState({
    hourlyActivity: [] as Array<{ hour: number; count: number }>,
    weeklyActivity: [] as WeeklyActivityData[]
  })

  const { user } = useAuthStore()

  useEffect(() => {
    const loadUserStats = async () => {
      try {
        console.log('üìä [Dashboard] ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Î°úÎî© ÏãúÏûë')
        
        // ÏÇ¨Ïö©Ïûê ID Í≤∞Ï†ï Î°úÏßÅ Í∞úÏÑ† - Îã§Ï§ë fallback Ï†ÑÎûµ
        let userId = user?.id
        
        if (!userId) {
          console.log('üîç [Dashboard] ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÏóÜÏùå, fallback Ï†ÑÎûµ ÏÇ¨Ïö©')
          // Îã§Ï§ë fallback Ï†ÑÎûµ
          userId = 'guest_user' // ÏûÑÏãú ÏÇ¨Ïö©Ïûê ID
          console.log('üìä [Dashboard] Guest ÏÇ¨Ïö©ÏûêÎ°ú Ï≤òÎ¶¨:', userId)
        }
        
        console.log('üìä [Dashboard] ÏÇ¨Ïö©Ìï† ÏÇ¨Ïö©Ïûê ID:', userId)

        // Í∞úÏÑ†Îêú API Ïú†Ìã∞Î¶¨Ìã∞ ÏÇ¨Ïö©
        const { getUserStats } = await import('../lib/api')
        const data = await getUserStats(userId)
        
        if (!data.success) {
          console.error('‚ùå [Dashboard] API ÏöîÏ≤≠ Ïã§Ìå®:', data.error)
          
          // API Ïã§Ìå® Ïãú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞Î°ú fallback
          console.log('üîÑ [Dashboard] Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞Î°ú fallback Ï≤òÎ¶¨')
          setUserStats({
            totalSearches: 0,
            reportsGenerated: 0,
            monthlyActivity: 0,
            savedPatents: 0,
            totalLogins: 0,
            engagementScore: 0,
            averageSearchResults: 0,
            aiAnalysisCount: 0,
            documentDownloadCount: 0,
            searchHistory: [],
            searchKeywords: [],
            recentSearches: [],
            recentReports: [],
            fieldDistribution: []
          })
          
          setChartData({
            hourlyActivity: [],
            weeklyActivity: []
          })
          
          setLoading(false)
          return
        }
        console.log('‚úÖ [Dashboard] ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Î°úÎî© ÏôÑÎ£å:', data)
        console.log('üìä [Dashboard] API ÏùëÎãµ Íµ¨Ï°∞:', {
          success: data.success,
          hasData: !!data.data,
          summary: data.data?.summary,
          recentSearches: data.data?.recent_searches?.length || 0,
          recentReports: data.data?.recent_reports?.length || 0,
          topKeywords: data.data?.top_keywords?.length || 0,
          weeklyActivities: data.data?.weekly_activities?.length || 0,
          fieldDistribution: data.data?.field_distribution?.length || 0,
          hourlyActivities: data.data?.hourly_activities?.length || 0
        })

        // API ÏùëÎãµ Íµ¨Ï°∞: data.data.summary, data.data.recent_searches Îì±
        const apiData = data.data || {}
        const summary = apiData.summary || {}

        // ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ ÏÑ§Ï†ï (Ïã§Ï†ú DB Îç∞Ïù¥ÌÑ∞ ÌôúÏö©)
        setUserStats({
          totalSearches: summary.search_count || 0,
          reportsGenerated: summary.report_generate_count || 0,
          monthlyActivity: summary.total_activities || 0,
          savedPatents: summary.patent_view_count || 0,
          totalLogins: summary.total_activities || 0, // Ï†ÑÏ≤¥ ÌôúÎèôÏúºÎ°ú ÎåÄÏ≤¥
          engagementScore: Math.min(100, Math.round((summary.total_activities || 0) * 2.5)), // ÌôúÎèô Í∏∞Î∞ò Ï†êÏàò
          averageSearchResults: summary.average_search_results || 0,
          aiAnalysisCount: summary.ai_analysis_count || 0,
          documentDownloadCount: summary.document_download_count || 0,
          searchHistory: apiData.daily_activities_100days || [],
          searchKeywords: apiData.top_keywords || [],
          recentSearches: apiData.recent_searches || [],
          recentReports: apiData.recent_reports || [],
          fieldDistribution: apiData.field_distribution || []
        })

        // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï (Ïã§Ï†ú DB Îç∞Ïù¥ÌÑ∞ ÌôúÏö©)
        const weeklyData = (apiData.weekly_activities || []).map((item: any, index: number) => ({
          day: item.day || `Day ${index}`,
          dayIndex: typeof item.dayIndex === 'number' ? item.dayIndex : index,
          count: item.count ?? ((item.searchCount || 0) + (item.aiAnalysisCount || 0)),
          searchCount: item.searchCount ?? item.searches ?? 0,
          aiAnalysisCount: item.aiAnalysisCount ?? item.reports ?? 0
        }))

        const hourlyData = (apiData.hourly_activities || []).map((item: any) => ({
          hour: typeof item.hour === 'number' ? item.hour : parseInt(item.hour) || 0,
          count: item.count ?? item.searchCount ?? 0
        }))

        setChartData({
          hourlyActivity: hourlyData,
          weeklyActivity: weeklyData
        })

      } catch (error) {
        console.error('‚ùå [Dashboard] ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Î°úÎî© Ïã§Ìå®:', error)
        setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
        setLoading(false)
        return
      } finally {
        setLoading(false)
      }
    }

    loadUserStats()
  }, [user?.id])

  // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ (Ïã§Ï†ú DB Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò)
  const stats = useMemo(() => {
    if (!userStats) return []

    return [
      {
        title: 'Ï¥ù Í≤ÄÏÉâ Ïàò',
        value: userStats.totalSearches.toLocaleString(),
        icon: Search,
        description: 'ÎàÑÏ†Å ÌäπÌóà Í≤ÄÏÉâ ÌöüÏàò',
        trend: userStats.totalSearches > 0 ? `${userStats.totalSearches}Ìöå` : '0Ìöå',
        trendLabel: 'Ï†ÑÏ≤¥ Í∏∞Í∞Ñ'
      },
      {
        title: 'ÏÉùÏÑ±Îêú Î≥¥Í≥†ÏÑú',
        value: userStats.reportsGenerated.toLocaleString(),
        icon: FileText,
        description: 'AI Î∂ÑÏÑù Î≥¥Í≥†ÏÑú Ïàò',
        trend: userStats.reportsGenerated > 0 ? `${userStats.reportsGenerated}Í∞ú` : '0Í∞ú',
        trendLabel: 'Ï†ÑÏ≤¥ Í∏∞Í∞Ñ'
      },
      {
        title: 'Ï†ÑÏ≤¥ ÌôúÎèô',
        value: userStats.monthlyActivity.toLocaleString(),
        icon: TrendingUp,
        description: 'Ï¥ù ÌôúÎèô ÌöüÏàò',
        trend: userStats.monthlyActivity > 0 ? `${userStats.monthlyActivity}Ìöå` : '0Ìöå',
        trendLabel: 'Ï†ÑÏ≤¥ Í∏∞Í∞Ñ'
      },
      {
        title: 'ÌèâÍ∑† Í≤ÄÏÉâ Í≤∞Í≥º',
        value: userStats.averageSearchResults.toLocaleString(),
        icon: Target,
        description: 'Í≤ÄÏÉâÎãπ ÌèâÍ∑† ÌäπÌóà Ïàò',
        trend: userStats.averageSearchResults > 0 ? `${userStats.averageSearchResults.toFixed(1)}Í∞ú` : '0Í∞ú',
        trendLabel: 'ÌèâÍ∑†'
      },
      {
        title: 'AI Î∂ÑÏÑù',
        value: userStats.aiAnalysisCount.toLocaleString(),
        icon: Zap,
        description: 'AI Î∂ÑÏÑù Ïã§Ìñâ ÌöüÏàò',
        trend: userStats.aiAnalysisCount > 0 ? `${userStats.aiAnalysisCount}Ìöå` : '0Ìöå',
        trendLabel: 'Ï†ÑÏ≤¥ Í∏∞Í∞Ñ'
      },
      {
        title: 'Î¨∏ÏÑú Îã§Ïö¥Î°úÎìú',
        value: userStats.documentDownloadCount.toLocaleString(),
        icon: Download,
        description: 'Îã§Ïö¥Î°úÎìúÌïú Î¨∏ÏÑú Ïàò',
        trend: userStats.documentDownloadCount > 0 ? `${userStats.documentDownloadCount}Í∞ú` : '0Í∞ú',
        trendLabel: 'Ï†ÑÏ≤¥ Í∏∞Í∞Ñ'
      }
    ]
  }, [userStats])

  // Í≤ÄÏÉâ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º 100Ïùº)
  const searchTrendData = useMemo(() => {
    if (!userStats.searchHistory || userStats.searchHistory.length === 0) {
      // Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± - ÏµúÍ∑º 100Ïùº
      const data = []
      for (let i = 99; i >= 0; i--) {
        const date = new Date()
        date.setDate(date.getDate() - i)
        data.push({
          date: date.toISOString().split('T')[0], // YYYY-MM-DD ÌòïÏãù
          count: 0,
          searchCount: 0
        })
      }
      return data
    }

    // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏùºÎ≥ÑÎ°ú ÏßëÍ≥Ñ (ÏµúÍ∑º 100Ïùº)
    const dailyData = userStats.searchHistory.reduce((acc, item) => {
      const date = new Date(item.date).toISOString().split('T')[0] // YYYY-MM-DD ÌòïÏãù
      if (!acc[date]) {
        acc[date] = { count: 0, searchCount: 0 }
      }
      acc[date].count += item.count || 0
      acc[date].searchCount += item.count || 0
      return acc
    }, {} as Record<string, { count: number; searchCount: number }>)

    return Object.entries(dailyData).map(([date, data]) => ({
      date,
      count: data.count,
      searchCount: data.searchCount
    })).slice(-100) // ÏµúÍ∑º 100ÏùºÎßå ÌëúÏãú
  }, [userStats.searchHistory])

  // Î∂ÑÏïºÎ≥Ñ Î∂ÑÌè¨ Îç∞Ïù¥ÌÑ∞
  const categoryData = useMemo(() => {
    if (!userStats.searchKeywords || userStats.searchKeywords.length === 0) {
      return [
        { field: 'AI/Î®∏Ïã†Îü¨Îãù', count: 0 },
        { field: 'Î∏îÎ°ùÏ≤¥Ïù∏', count: 0 },
        { field: 'IoT', count: 0 },
        { field: 'Î∞îÏù¥Ïò§', count: 0 },
        { field: 'ÏûêÎèôÏ∞®', count: 0 },
        { field: 'Î∞òÎèÑÏ≤¥/Ï†ÑÏûê', count: 0 }
      ]
    }

    // ÌÇ§ÏõåÎìúÎ•º Î∂ÑÏïºÎ≥ÑÎ°ú Î∂ÑÎ•ò (API field_distribution Îç∞Ïù¥ÌÑ∞ ÌôúÏö©)
    if (userStats.fieldDistribution && userStats.fieldDistribution.length > 0) {
      return userStats.fieldDistribution
        .sort((a, b) => b.count - a.count)
        .slice(0, 7) // ÏÉÅÏúÑ 7Í∞úÎßå
    }
    
    // Î∞±ÏóÖ: top_keywordsÏóêÏÑú field Ï†ïÎ≥¥ ÌôúÏö©
    const fieldCounts = userStats.searchKeywords.reduce((acc, item) => {
      const field = item.field || 'Í∏∞ÌÉÄ'
      acc[field] = (acc[field] || 0) + item.count
      return acc
    }, {} as Record<string, number>)
    
    return Object.entries(fieldCounts)
      .map(([field, count]) => ({
        field,
        count
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 7) // ÏÉÅÏúÑ 7Í∞úÎßå
  }, [userStats.searchKeywords])

  // ÏµúÍ∑º ÌôúÎèô Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†ú DB Îç∞Ïù¥ÌÑ∞ ÌôúÏö©)
  const recentActivity = useMemo(() => {
    const activities = []
    
    // ÏµúÍ∑º Í≤ÄÏÉâ Ï∂îÍ∞Ä (API recent_searches Íµ¨Ï°∞Ïóê ÎßûÍ≤å)
    userStats.recentSearches.slice(0, 3).forEach((search, index) => {
      activities.push({
        id: `search-${index}`,
        type: 'search',
        title: search.keyword,
        description: `${search.resultsCount}Í∞ú Í≤∞Í≥º ‚Ä¢ ${search.field}`,
        timestamp: search.searchDate,
        icon: Search
      })
    })

    // ÏµúÍ∑º Î≥¥Í≥†ÏÑú Ï∂îÍ∞Ä (API recent_reports Íµ¨Ï°∞Ïóê ÎßûÍ≤å)
    userStats.recentReports.slice(0, 2).forEach(report => {
      activities.push({
        id: report.id,
        type: 'report',
        title: report.title,
        description: `Ï∂úÏõêÎ≤àÌò∏: ${report.applicationNumber}`,
        timestamp: report.createdAt,
        icon: FileText
      })
    })

    // ÏãúÍ∞ÑÏàú Ï†ïÎ†¨
    return activities
      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
      .slice(0, 5)
  }, [userStats.recentSearches, userStats.recentReports])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ÎåÄÏãúÎ≥¥ÎìúÎ•º Î°úÎî© Ï§ëÏûÖÎãàÎã§...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <Button 
            onClick={() => window.location.reload()} 
            className="bg-[var(--ms-olive-600)] hover:bg-[var(--ms-olive-700)] text-white"
          >
            Îã§Ïãú ÏãúÎèÑ
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Ìó§Îçî */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">ÎåÄÏãúÎ≥¥Îìú</h1>
          <p className="mt-2 text-gray-600">
            ÏïàÎÖïÌïòÏÑ∏Ïöî, {user?.email || 'ÏÇ¨Ïö©Ïûê'}Îãò! ÌäπÌóà Í≤ÄÏÉâ ÌôúÎèôÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.
          </p>
        </div>
        <div className="mt-4 sm:mt-0">
          <Link to="/search">
            <Button className="bg-[var(--ms-olive-600)] hover:bg-[var(--ms-olive-700)] text-white flex items-center space-x-2">
              <Search className="h-4 w-4" />
              <span>ÏÉà Í≤ÄÏÉâ</span>
            </Button>
          </Link>
        </div>
      </div>

      {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {stats.map((stat, index) => {
          const Icon = stat.icon
          return (
            <Card key={index} className="hover:bg-ms-olive/5 transition-colors">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-gray-600">
                  {stat.title}
                </CardTitle>
                <Icon className="h-4 w-4 text-gray-400" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-gray-900">{stat.value}</div>
                <p className="text-xs text-gray-600 mt-1">{stat.description}</p>
                <div className="flex items-center mt-2">
                  <span className="text-xs font-medium text-green-600">
                    {stat.trend}
                  </span>
                  <span className="text-xs text-gray-500 ml-1">
                    {stat.trendLabel}
                  </span>
                </div>
              </CardContent>
            </Card>
          )
        })}
      </div>

      {/* Ï∞®Ìä∏ ÏÑπÏÖò */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Í≤ÄÏÉâ Ìä∏Î†åÎìú Ï∞®Ìä∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5" />
              <span>Í≤ÄÏÉâ Ìä∏Î†åÎìú</span>
            </CardTitle>
            <CardDescription>ÏµúÍ∑º 100ÏùºÍ∞Ñ ÏùºÎ≥Ñ Í≤ÄÏÉâ ÌôúÎèô</CardDescription>
          </CardHeader>
          <CardContent>
            <SearchTrendChart data={searchTrendData} />
          </CardContent>
        </Card>

        {/* Î∂ÑÏïºÎ≥Ñ Î∂ÑÌè¨ Ï∞®Ìä∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <PieChartIcon className="h-5 w-5" />
              <span>Î∂ÑÏïºÎ≥Ñ Î∂ÑÌè¨</span>
            </CardTitle>
            <CardDescription>ÏµúÍ∑º 100ÏùºÍ∞Ñ Í≤ÄÏÉâ ÌÇ§ÏõåÎìú Í∏∞Ïà† Î∂ÑÏïº Î∂ÑÌè¨</CardDescription>
          </CardHeader>
          <CardContent>
            <FieldDistributionChart data={categoryData} />
          </CardContent>
        </Card>
      </div>

      {/* ÌôúÎèô Ï∞®Ìä∏ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* ÏãúÍ∞ÑÎåÄÎ≥Ñ ÌôúÎèô */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Clock className="h-5 w-5" />
              <span>ÏãúÍ∞ÑÎåÄÎ≥Ñ ÌôúÎèô</span>
            </CardTitle>
            <CardDescription>ÌïòÎ£® Ï§ë Í≤ÄÏÉâÏù¥ ÎßéÏùÄ ÏãúÍ∞ÑÎåÄ</CardDescription>
          </CardHeader>
          <CardContent>
            <HourlyActivityChart data={chartData.hourlyActivity} />
          </CardContent>
        </Card>

        {/* Ï£ºÍ∞Ñ ÌôúÎèô */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Calendar className="h-5 w-5" />
              <span>Ï£ºÍ∞Ñ ÌôúÎèô</span>
            </CardTitle>
            <CardDescription>ÏöîÏùºÎ≥Ñ ÌôúÎèô ÌÜµÍ≥Ñ (Ïõî~Ïùº)</CardDescription>
          </CardHeader>
          <CardContent>
            <WeeklyActivityChart data={chartData.weeklyActivity} />
          </CardContent>
        </Card>
      </div>

      {/* ÏµúÍ∑º ÌôúÎèô ÏÑπÏÖò */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* ÏµúÍ∑º Í≤ÄÏÉâ ÌÇ§ÏõåÎìú */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Search className="h-5 w-5" />
              <span>ÏµúÍ∑º Í≤ÄÏÉâ ÌÇ§ÏõåÎìú</span>
            </CardTitle>
            <CardDescription>ÏµúÍ∑º Í≤ÄÏÉâÌïú ÌÇ§ÏõåÎìú 5Í∞ú</CardDescription>
          </CardHeader>
          <CardContent>
            {userStats.recentSearches && userStats.recentSearches.length > 0 ? (
              <div className="space-y-3">
                {userStats.recentSearches.slice(0, 5).map((search, index) => (
                  <div key={index} className="flex items-center justify-between p-3 rounded-lg hover:bg-gray-50">
                    <div className="flex-1">
                      <p className="text-sm font-medium text-gray-900">
                        {search.keyword}
                      </p>
                      <p className="text-xs text-gray-500">
                        {search.resultsCount}Í∞ú Í≤∞Í≥º ‚Ä¢ {search.field}
                      </p>
                    </div>
                    <div className="text-xs text-gray-400">
                      {new Date(search.searchDate).toLocaleDateString('ko-KR')}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Search className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">ÏïÑÏßÅ Í≤ÄÏÉâ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                <Link to="/search">
                  <Button className="mt-4 bg-[var(--ms-olive-600)] hover:bg-[var(--ms-olive-700)] text-white">
                    Ï≤´ Í≤ÄÏÉâ ÏãúÏûëÌïòÍ∏∞
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>

        {/* ÏµúÍ∑º Î≥¥Í≥†ÏÑú */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="h-5 w-5" />
              <span>ÏµúÍ∑º Î≥¥Í≥†ÏÑú</span>
            </CardTitle>
            <CardDescription>ÏµúÍ∑º ÏûëÏÑ±Ìïú Î≥¥Í≥†ÏÑú 20Í∞ú</CardDescription>
          </CardHeader>
          <CardContent>
            {userStats.recentReports && userStats.recentReports.length > 0 ? (
              <div className="space-y-3">
                {userStats.recentReports.slice(0, 20).map((report, index) => (
                  <div key={report.id} className="flex items-center justify-between p-3 rounded-lg hover:bg-gray-50">
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {report.title}
                      </p>
                      <p className="text-xs text-gray-500">
                        Ï∂úÏõêÎ≤àÌò∏: {report.applicationNumber}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="text-xs text-gray-400">
                        {new Date(report.createdAt).toLocaleDateString('ko-KR')}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <FileText className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">ÏïÑÏßÅ ÏûëÏÑ±Ìïú Î≥¥Í≥†ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}